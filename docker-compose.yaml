x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.3}
  image: my-airflow:latest
  # build: .
  build:
      context: ..
      dockerfile: airflow/Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW__WEBSERVER__SECRET_KEY: '29BFF640-9116-45CB-8450-BD54E787E641'
    AIRFLOW__WEBSERVER__WORKER_LOG_SERVER_PORT: 8793
    AIRFLOW__WEBSERVER__BASE_URL: http://localhost:8080
    AIRFLOW__CORE__REMOTE_LOGGING: 'False'
    PYTHONPATH: /opt/airflow/data-pipelines
    AIRFLOW_HOME: /opt/airflow
    JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
    PATH: /usr/lib/jvm/java-17-openjdk-arm64/bin:/home/airflow/.local/bin:/opt/airflow/venv/bin:/opt/spark/bin:$PATH

  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

services:
  airflow-postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    

  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    # image: my-airflow:latest
    user: "${AIRFLOW_UID:-50000}:0" #"501:0"
    command: webserver
    ports:
      - "8080:8080"
    environment:
      <<: *airflow-common-env
      AIRFLOW__LOGGING__WORKER_LOG_SERVER_PORT: 8793
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__HOSTNAME_CALLABLE: "socket.getfqdn"
      AWS_PROFILE: local_dev
      AWS_SHARED_CREDENTIALS_FILE: /opt/airflow/.aws/credentials
      # AIRFLOW_HOME: /opt/airflow
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - /Users/tanvithanki/Documents/git_repos/data_eng/data-pipelines:/opt/airflow/data-pipelines
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.aws:/opt/airflow/.aws:ro

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    image: my-airflow:latest
    user: "${AIRFLOW_UID:-50000}:0" #"501:0"
    environment:
      <<: *airflow-common-env
      AIRFLOW__LOGGING__WORKER_LOG_SERVER_PORT: 8793
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__HOSTNAME_CALLABLE: "socket.getfqdn"
      AWS_PROFILE: local_dev
      AWS_SHARED_CREDENTIALS_FILE: /opt/airflow/.aws/credentials
      AIRFLOW_CONN_SPARK_DEFAULT: spark://local[*]
      # AIRFLOW_HOME: /opt/airflow
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      # spark-master:
    volumes:
      - ./dags:/opt/airflow/dags
      - /Users/tanvithanki/Documents/git_repos/data_eng/data-pipelines:/opt/airflow/data-pipelines
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.aws:/opt/airflow/.aws:ro

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    image: my-airflow:latest
    user: "${AIRFLOW_UID:-50000}:0" #"501:0"
    # build: .
    ports:
      - "8793:8793"
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
      AIRFLOW__LOGGING__WORKER_LOG_SERVER_PORT: 8793
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__HOSTNAME_CALLABLE: "socket.getfqdn"
      AWS_PROFILE: local_dev
      AWS_SHARED_CREDENTIALS_FILE: /opt/airflow/.aws/credentials
      AIRFLOW_CONN_SPARK_DEFAULT: spark://local[*]
      # AIRFLOW_HOME: /opt/airflow
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - /Users/tanvithanki/Documents/git_repos/data_eng/data-pipelines:/opt/airflow/data-pipelines
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.aws:/opt/airflow/.aws:ro

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    image: my-airflow:latest
    # build: .
    environment:
      <<: *airflow-common-env
      AIRFLOW__LOGGING__WORKER_LOG_SERVER_PORT: 8793
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__HOSTNAME_CALLABLE: "socket.getfqdn"
      AWS_PROFILE: local_dev
      AWS_SHARED_CREDENTIALS_FILE: /opt/airflow/.aws/credentials
      # AIRFLOW_HOME: /opt/airflow
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - /Users/tanvithanki/Documents/git_repos/data_eng/data-pipelines:/opt/airflow/data-pipelines
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.aws:/opt/airflow/.aws:ro

  airflow-init:
    <<: *airflow-common
    image: my-airflow:latest
    depends_on:
      - airflow-postgres
    # entrypoint: ["/bin/bash", "-c"]
    user: "0:0"
    command: >
      bash -c "mkdir -p /opt/airflow/dags /opt/airflow/logs /opt/airflow/plugins &&
      chown -R "${AIRFLOW_UID:-50000}:0" /opt/airflow &&
      su airflow -c 'airflow db init && airflow users create --username airflow --password airflow --firstname admin --lastname admin --role Admin --email tvthanki@gmail.com'"
    environment:
      <<: *airflow-common-env
      AIRFLOW_HOME: /opt/airflow
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
  
  airflow-shell:
    image: my-airflow:latest
    entrypoint: ["/bin/bash"]
    tty: true
    stdin_open: true
    user: airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # spark-master:
  #   image: bitnami/spark:latest
  #   environment:
  #     - SPARK_MODE=master
  #   ports:
  #     - "8082:8082"
  #     - "7077:7077"
  #   # volumes:
  #   #   - spark-data:/bitnami
  #   #   - ./apps:/opt/spark-apps
  #   #   - ./data:/opt/spark-data
  #   # networks:
  #   #   - data-platform

  # spark-worker:
  #   image: bitnami/spark:latest
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER_URL=spark://spark-master:7077
  #   # volumes:
  #   #   - spark-data:/bitnami
  #   #   - ./apps:/opt/spark-apps
  #   #   - ./data:/opt/spark-data
  #   depends_on:
  #     - spark-master
  #   # networks:
  #   #   - data-platform

volumes:
  postgres-db-volume:
  logs-volume:
  # spark-data:

networks:
  default:
      name: data-platform
      external: true

